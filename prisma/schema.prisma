// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       Int    @id @default(autoincrement())

  fullName String
  email    String @unique
  password String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id Int @default(autoincrement())
  name String @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 }

model Product {
  id       Int     @id @default(autoincrement())

  name     String
  imageUrl String

  ingredients Ingredient[]
  variations ProductItem[]

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id Int @id @default(autoincrement())

  price Int
  size Int?
  pizzaTpe Int?

  cartItems CartItem[]

  product Product @relation(fields: [categoryId], references: [id])
  productId Int
}

model Ingredient {
  id       Int    @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  products Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  token String

  totalAmount Int @default(0)

  items  CartItem[]
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {

  productItemId Int
  productItemId   productItemId @relation(fields: [productItemId], references: [id])

  quantity Int

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  code String

  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
